#
#  TOPPERS ATK2
#      Toyohashi Open Platform for Embedded Real-Time Systems
#      Automotive Kernel Version 2
#
#  Copyright (C) 2008-2017 by Center for Embedded Computing Systems
#              Graduate School of Information Science, Nagoya Univ., JAPAN
#  Copyright (C) 2011-2017 by FUJI SOFT INCORPORATED, JAPAN
#  Copyright (C) 2011-2013 by Spansion LLC, USA
#  Copyright (C) 2011-2017 by NEC Communication Systems, Ltd., JAPAN
#  Copyright (C) 2011-2016 by Panasonic Advanced Technology Development Co., Ltd., JAPAN
#  Copyright (C) 2011-2014 by Renesas Electronics Corporation, JAPAN
#  Copyright (C) 2011-2016 by Sunny Giken Inc., JAPAN
#  Copyright (C) 2011-2017 by TOSHIBA CORPORATION, JAPAN
#  Copyright (C) 2011-2017 by Witz Corporation
#  Copyright (C) 2014-2016 by AISIN COMCRUISE Co., Ltd., JAPAN
#  Copyright (C) 2014-2016 by eSOL Co.,Ltd., JAPAN
#  Copyright (C) 2014-2017 by SCSK Corporation, JAPAN
#  Copyright (C) 2015-2017 by SUZUKI MOTOR CORPORATION
#
#  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#      スコード中に含まれていること．
#  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#      の無保証規定を掲載すること．
#  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#      と．
#    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#        作権表示，この利用条件および下記の無保証規定を掲載すること．
#    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#        報告すること．
#  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#      免責すること．
#
#  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
#  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
#  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
#  用する者に対して，AUTOSARパートナーになることを求めている．
#
#  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#  の責任を負わない．
#
#  $Id: Makefile.kernel 727 2017-01-23 09:27:59Z witz-itoyo $
#

#
#		カーネルのファイル構成の定義
#

#
#  1つのソースファイルから複数のオブジェクトファイルを生成するように作
#  成されたソースファイルのリスト
#
KERNEL_FCSRCS = counter_manage.c counter.c alarm.c osctl_manage.c osctl.c task_manage.c \
		event.c resource.c interrupt_manage.c interrupt.c task.c scheduletable.c

#
#  各ソースファイルから生成されるオブジェクトファイルのリスト
#
osctl = internal_call_errorhook.o call_posttaskhook.o call_pretaskhook.o init_stack_magic_region.o \
		call_protectionhk_main.o internal_shutdownos.o internal_call_shtdwnhk.o

osctl_manage = StartOS.o GetActiveApplicationMode.o ShutdownOS.o GetFaultyContext.o


task = task_initialize.o search_schedtsk.o make_runnable.o make_non_runnable.o \
		make_active.o preempt.o suspend.o exit_task.o

event = SetEvent.o ClearEvent.o GetEvent.o WaitEvent.o set_event_action.o

task_manage = ActivateTask.o TerminateTask.o ChainTask.o Schedule.o GetTaskID.o \
		GetTaskState.o activate_task_action.o

resource = resource_initialize.o GetResource.o ReleaseResource.o

counter = insert_cnt_expr_que.o delete_cnt_expr_que.o counter_initialize.o \
		counter_terminate.o get_reltick.o get_abstick.o expire_process.o

counter_manage = IncrementCounter.o GetCounterValue.o GetElapsedValue.o notify_hardware_counter.o \
		incr_counter_action.o

alarm = alarm_initialize.o alarm_expire.o GetAlarmBase.o GetAlarm.o SetRelAlarm.o SetAbsAlarm.o \
		CancelAlarm.o

interrupt = interrupt_initialize.o release_interrupts.o exit_isr2.o

interrupt_manage = DisableAllInterrupts.o EnableAllInterrupts.o SuspendAllInterrupts.o \
		ResumeAllInterrupts.o SuspendOSInterrupts.o ResumeOSInterrupts.o GetISRID.o \
		DisableInterruptSource.o EnableInterruptSource.o

scheduletable = schtbl_initialize.o StartScheduleTableRel.o StartScheduleTableAbs.o \
		StopScheduleTable.o NextScheduleTable.o GetScheduleTableStatus.o \
		schtbl_expire.o schtbl_expiry_process.o schtbl_head.o schtbl_exppoint_process.o schtbl_tail.o

#
#  生成されるオブジェクトファイルの依存関係の定義
#
$(osctl) $(osctl:.o=.s) $(osctl:.o=.d): osctl.c
$(osctl_manage) $(osctl_manage:.o=.s) $(osctl_manage:.o=.d): osctl_manage.c
$(task) $(task:.o=.s) $(task:.o=.d): task.c
$(task_manage) $(task_manage:.o=.s) $(task_manage:.o=.d): task_manage.c
$(event) $(event:.o=.s) $(event:.o=.d): event.c
$(resource) $(resource:.o=.s) $(resource:.o=.d): resource.c
$(counter) $(counter:.o=.s) $(counter:.o=.d): counter.c
$(counter_manage) $(counter_manage:.o=.s) $(counter_manage:.o=.d): counter_manage.c
$(alarm) $(alarm:.o=.s) $(alarm:.o=.d): alarm.c
$(scheduletable) $(scheduletable:.o=.s) $(scheduletable:.o=.d): scheduletable.c
$(interrupt) $(interrupt:.o=.s) $(interrupt:.o=.d): interrupt.c
$(interrupt_manage) $(interrupt_manage:.o=.s) $(interrupt_manage:.o=.d): interrupt_manage.c
